rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  	match /gear/{gearId} {
      allow read;
      allow write: if request.auth != null && get(/databases/users/$(request.auth.uid)).permLvl > 1;
      allow create: if request.resource.data.keys().hasAll(['name', 'gearId', 'checkedOut']) &&
       								 request.resource.data.keys().hasOnly(['name', 'gearId', 'checkedOut', 'photo']) && 
      								 request.resource.data.name is string &&
      								 request.resource.data.gearId is string &&
                       request.resource.data.gearId.size() == 6 &&
                       exists(/databases/$(database)/documents/gear/$(request.resource.data.gearId)) == false &&
                       request.resource.data.checkedOut == false &&
                       request.resource.data.photo is string;
      match /{extraFields} {
      	allow create: if request.resource.data.keys().hasOnly(['brand', 'color', 'size', 'notes']);
      }
      match /{leaderFields} {
    		allow create: if request.resource.data.keys().hasOnly(['whoHasThis', 'whoLentThis', 'leaderNotes']);
        allow read, write: if request.auth != null && get(/databases/users/$(request.auth.uid)).permLvl > 0;
    	}
    	match /{managerFields} {  
      	allow create: if request.resource.data.keys().hasAll(['created', 'lastUpdated']) &&
                         request.resource.data.keys().hasOnly(['created', 'lastUpdated', 'price', 'managerNotes']);
    		allow read, write: if request.auth != null && get(/databases/users/$(request.auth.uid)).permLvl > 1;
    	}
    }
  	match /users/{userId} {
    	allow read: if request.auth != null && get(/databases/users/$(request.auth.uid)).permLvl > 0;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
  	}
  }
}